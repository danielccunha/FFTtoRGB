using System;
using System.Linq;
using FFTtoRGB.FFT;
using FFTtoRGB.Color;
using System.Diagnostics;

namespace FFTtoRGB
{
    /// <summary>
    /// Generates the RGB using the FFTProvider
    /// </summary>
    public class RGBGenerator
    {
        /// <summary>
        /// FFT Provider
        /// </summary>
        private FFTProvider FFTProvider { get; set; }

        /// <summary>
        /// Frequencies array
        /// </summary>
        private double[] Frequencies { get; set; }

        /// <summary>
        /// RGB colors distribution 
        /// </summary>
        public ColorSettings Settings { get; set; }

        /// <summary>
        /// Biggest value generated by the FFT used to calculate the RGB colors
        /// </summary>
        public double MaxValue { get; private set; } = 0;

        public RGBGenerator()
        {
            FFTProvider = new FFTProvider();
            Settings = new ColorSettings();

            Frequencies = FFTProvider.GetFreqArray();
        }
        public RGBGenerator(FFTProviderConfig config)
        {
            FFTProvider = new FFTProvider(config);
            Settings = new ColorSettings();

            Frequencies = FFTProvider.GetFreqArray();
        }

        /// <summary>
        /// Normalize the FFT array, making all values positive, adding the abs of the min value to all the others.
        /// The reason is that some values of the FFT may be negative, what prejudices the RGB generating.
        /// </summary>
        /// <param name="data">FFT Array</param>
        /// <returns>Normalized Array</returns>
        private double[] NormalizeArray(double[] data)
        {
            var minValue = data.Min();

            if (minValue < 0)
            {
                var N = Math.Abs(minValue);
                for (int i = 0; i < data.Length; i++)
                    data[i] += N;
            }

            return data;
        }

        /// <summary>
        /// Calculate the RGB color based on the FFT array
        /// </summary>
        /// <param name="FFT">FFT double array</param>
        /// <returns>Generated RGB color</returns>
        public RGB GenerateColor(double[] FFT)
        {
            FFT = NormalizeArray(FFT);

            if (FFT.Max() > MaxValue)
                MaxValue = FFT.Max();

            int pX = (int)Math.Floor(FFT.Length * Settings.X);
            int pY = (int)Math.Floor(FFT.Length * Settings.Y);

            // Ordered values
            var X = (int)Math.Ceiling(Calc.SubArray(FFT, 0, pX).Average().Map(0, MaxValue, 0, 255));
            var Y = (int)Math.Ceiling(Calc.SubArray(FFT, pX, pY - pX).Average().Map(0, MaxValue, 0, 255));
            var Z = (int)Math.Ceiling(Calc.SubArray(FFT, pY, FFT.Length - pY).Average().Map(0, MaxValue, 0, 255));

            return new RGB(X, Y, Z, Settings.Order);
        }

        private double[] CalculateAverage(double[] data)
        {
            throw new NotImplementedException();
        }

        public void Start() => FFTProvider.StartRecording();
        public void Stop() => FFTProvider.StopRecording();
        public void Dispose() => FFTProvider.Dispose();
        public double[] Read() => FFTProvider.Read();
    }
}
